/*
This code was created by Aaron Brown.
It used a few different sensor API provided by the following URL's,
https://github.com/adafruit/Adafruit_Sensor/archive/master.zip
https://github.com/adafruit/Adafruit_BMP085_Unified/archive/master.zip
https://github.com/adafruit/Adafruit_LSM303DLHC/archive/master.zip
https://github.com/adafruit/Adafruit_L3GD20_U/archive/master.zip
https://github.com/adafruit/Adafruit_9DOF/archive/master.zip

Not all of this code was written by me, I have just taken from the examples, and modified it.

*/
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085_U.h>
#include <Adafruit_LSM303_U.h>
#include <Adafruit_9DOF.h>
#include <Adafruit_L3GD20_U.h>

//Setting up ID's for sensors
Adafruit_9DOF                 dof   = Adafruit_9DOF();
Adafruit_LSM303_Accel_Unified accel = Adafruit_LSM303_Accel_Unified(30301);
Adafruit_LSM303_Mag_Unified   mag   = Adafruit_LSM303_Mag_Unified(30302);
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);
Adafruit_L3GD20_Unified       gyro  = Adafruit_L3GD20_Unified(20);

long interval = 1000;
long previousmillis= 0;

void initSensors() {
  if(!accel.begin())
  {
    /* There was a problem detecting the LSM303 ... check your connections */
    Serial.println(F("Ooops, no LSM303 detected ... Check your wiring!"));
    while(1);
  }
  if(!mag.begin())
  {
    /* There was a problem detecting the LSM303 ... check your connections */
    Serial.println("Ooops, no LSM303 detected ... Check your wiring!");
    while(1);
  }
  if(!gyro.begin()) {
  /* There was a problem detecting the L3GD20 ... check your connections */
    Serial.println("Ooops, no L3GD20 detected ... Check your wiring!");
    while(1);
  }
  if(!bmp.begin())
  {
    /* There was a problem detecting the BMP085 ... check your connections */
    Serial.print("Ooops, no BMP085 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }
}


void setup(){

  
  Serial.begin(115200); //I need help for choosing this correctly
  sensors_event_t event;
  gyro.enableAutoRange(true); /* Enable auto-ranging */
  initSensors();  /* Initialise the sensors */
  
}
void loop() {

  unsigned long currentmillis = millis();
  if(currentmillis - previousmillis > interval){
    previousmillis = currentmillis;
    //Setting up sensor events
  sensors_event_t accel_event; //For accelerometer
  sensors_event_t mag_event; //For magnetometer
  sensors_vec_t   orientation; //for orientation
  sensors_event_t event;  //For pressure and temperature
  


  //Read the accelerometer and magnetometer
  accel.getEvent(&accel_event);
  mag.getEvent(&mag_event);

  bmp.getEvent(&event);


  /* Stores the results (barometric pressure is measure in hPa) */
  if (event.pressure) {
    /* Stores atmospheric pressue in hPa */
    Serial.print("Pressure:    ");
    Serial.print(event.pressure);
    Serial.println(" hPa");

    //Stores tempature in degrees C
    
    float temperature;
    bmp.getTemperature(&temperature);
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.println(" C");

     //Stores altitude in meters
     /* Then convert the atmospheric pressure, and SLP to altitude         */
    /* Update this next line with the current SLP for better results      */
    float seaLevelPressure = SENSORS_PRESSURE_SEALEVELHPA;
    float Altitude = bmp.pressureToAltitude(seaLevelPressure,event.pressure);
    Serial.print("Altitude:    "); 
    Serial.print(Altitude); 
    Serial.println(" m");
    Serial.println("");
  }else{
    Serial.print("Sensor problem");
  }



    //Saving the X, Y, and Z in rad/s
   float X=event.gyro.x;
   float Y=event.gyro.y;
   float Z=event.gyro.z;


    //Saving orientation roll, pitch, and heading
   if (dof.fusionGetOrientation(&accel_event, &mag_event, &orientation)){
      float roll = orientation.roll;
      float pitch = orientation.pitch;
      float heading = orientation.heading;
      Serial.print("Roll: ");
      Serial.print(roll);
      Serial.print(" degrees");
      Serial.print("  ");
    
      Serial.print("Pitch: ");
      Serial.print(pitch);
      Serial.print(" degrees");
      Serial.print("  ");

  }

  
   
  //Saving accelerometer values x, y, and z.
  float Accel_x = accel.raw.x;
  float Accel_y = accel.raw.y;
  float Accel_z = accel.raw.z;
  }
  

}
